# Form implementation generated from reading ui file 'first.ui'
#
# Created by: PyQt6 UI code generator 6.2.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QFileDialog
from PyQt6.QtGui import QImage
import cv2
import numpy as np 

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(464, 463)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("Screen Shot 2021-11-28 at 3.45.02 AM.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.verticalSlider = QtWidgets.QSlider(self.centralwidget)
        self.verticalSlider.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.verticalSlider.setObjectName("verticalSlider")
        self.horizontalLayout.addWidget(self.verticalSlider)
        self.verticalSlider_2 = QtWidgets.QSlider(self.centralwidget)
        self.verticalSlider_2.setOrientation(QtCore.Qt.Orientation.Vertical)
        self.verticalSlider_2.setObjectName("verticalSlider_2")
        self.horizontalLayout.addWidget(self.verticalSlider_2)
        self.gridLayout.addLayout(self.horizontalLayout, 0, 0, 1, 3)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 1, 0, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout.addWidget(self.pushButton_2, 1, 1, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout.addItem(spacerItem, 1, 2, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 464, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)


        self.filename = None
        self.tmp = None
        self. scale_now = 0
        self.contrast_value_now = 0

        self.retranslateUi(MainWindow)
        self.verticalSlider.valueChanged['int'].connect(self.scale) # type: ignore
        self.verticalSlider_2.valueChanged['int'].connect(self.contrast_value) # type: ignore
        self.pushButton.clicked.connect(self.load_image) # type: ignore
        self.pushButton_2.clicked.connect(self.savePhoto) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def load_image(self):
        self.filename = QFileDialog.getOpenFileName(filter="Image (*.*)")[0]
        self.image = cv2.imread(self.filename)
        self.setPhoto(self.image)
        print(self.filename)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Open"))
        self.pushButton_2.setText(_translate("MainWindow", "Save"))


    def setPhoto(self,image):
        print("original : ", image.shape)
        self.tmp = image
        MAX_WIDTH = 320
        MAX_HEIGHT = 320
        cropped_image = image
        if image.shape[0]> MAX_HEIGHT and image.shape[1] > MAX_WIDTH:
            if image.shape[1]>image.shape[0]:
                aspect_ratio = image.shape[1]/image.shape[0]
                crop_width = MAX_WIDTH
                crop_height = int(crop_width/aspect_ratio)
            else:
                aspect_ratio = image.shape[1]/image.shape[0]
                crop_height = MAX_HEIGHT
                crop_width = int(crop_height * aspect_ratio)

            r_, c_ = image.shape[:2]
            start_row = int(r_/2) - int(crop_height/2)
            end_row = start_row + crop_height
            start_col = int(c_/2) - int(crop_width/2)
            end_col = start_col + crop_width

            cropped_image = image[start_row:end_row, start_col:end_col]
        
        print("cropped dim : ", cropped_image.shape)
        frame = cv2.cvtColor(cropped_image, cv2.COLOR_BGR2RGB)
        image = QImage(frame, frame.shape[1],frame.shape[0],frame.strides[0],QImage.Format.Format_RGB888)
        self.label.setPixmap(QtGui.QPixmap.fromImage(image))

    def scale(self,value):
        self.scale_now = int(value/10) + 1
        self.update()
        
        
    def contrast_value(self,value):
        self.contrast_value_now = 1 + int(value/10) * 0.1
        print('Blur: ',value)
        self.update()
    
    
    def changeScale(self,img,value):
        # hsv = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)
        # h,s,v = cv2.split(hsv)
        # lim = 255 - value
        # v[v>lim] = 255
        # v[v<=lim] += value
        # final_hsv = cv2.merge((h,s,v))
        # img = cv2.cvtColor(final_hsv,cv2.COLOR_HSV2BGR)
        print("scale: ", value)
        tt = cv2.resize(img, (int(img.shape[1] * value), int(img.shape[0] * value)), cv2.INTER_AREA)
        print(value, tt.shape)
        return tt
        
    def changeContrast(self,img,value):
        tmp = np.int32(img)
        tmp = np.int32(tmp*value)
        tmp[tmp<0] = 0
        tmp[tmp>255] = 255
        return np.uint8(tmp)
    
    def update(self):
        img = self.changeScale(self.image,self.scale_now)
        img = self.changeContrast(img,self.contrast_value_now)
        self.setPhoto(img)
    
    def savePhoto(self):
        filename = QFileDialog.getSaveFileName(filter="JPG(*.jpg);;PNG(*.png);;TIFF(*.tiff);;BMP(*.bmp)")[0]
        
        cv2.imwrite(filename,self.tmp)
        print('Image saved as:',self.filename)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
